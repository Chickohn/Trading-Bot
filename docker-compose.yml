version: '3.8'

services:
  # Trading Bot Application
  trading-bot:
    build:
      context: .
      dockerfile: docker/Dockerfile
    container_name: trading-bot
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://trading_user:trading_pass@postgres:5432/trading_bot
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - postgres
      - redis
      - mlflow
    volumes:
      - ./models:/app/models
      - ./logs:/app/logs
      - ./data:/app/data
    networks:
      - trading-network
    command: ["python", "-m", "src.main", "--mode", "paper"]

  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: trading-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: trading_bot
      POSTGRES_USER: trading_user
      POSTGRES_PASSWORD: trading_pass
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - trading-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: trading-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - trading-network

  # MLflow Tracking Server
  mlflow:
    image: python:3.11-slim
    container_name: trading-mlflow
    restart: unless-stopped
    working_dir: /app
    volumes:
      - ./docker/mlflow:/app
    ports:
      - "5000:5000"
    networks:
      - trading-network
    command: >
      sh -c "pip install mlflow psycopg2-binary &&
             mlflow server --host 0.0.0.0 --port 5000 --backend-store-uri postgresql://trading_user:trading_pass@postgres:5432/mlflow --default-artifact-root ./mlruns"

  # Prometheus Metrics Server
  prometheus:
    image: prom/prometheus:latest
    container_name: trading-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - trading-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: trading-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - trading-network

  # Jupyter Notebook for Analysis
  jupyter:
    image: jupyter/datascience-notebook:latest
    container_name: trading-jupyter
    restart: unless-stopped
    ports:
      - "8888:8888"
    environment:
      - JUPYTER_ENABLE_LAB=yes
    volumes:
      - ./notebooks:/home/jovyan/work
      - ./data:/home/jovyan/data
    networks:
      - trading-network
    command: ["jupyter", "lab", "--ip=0.0.0.0", "--port=8888", "--no-browser", "--allow-root", "--NotebookApp.token=''", "--NotebookApp.password=''"]

  # Flower for Celery Monitoring (if using Celery)
  flower:
    image: mher/flower:latest
    container_name: trading-flower
    restart: unless-stopped
    ports:
      - "5555:5555"
    environment:
      - FLOWER_BASIC_AUTH=admin:admin
    networks:
      - trading-network
    command: ["flower", "--broker=redis://redis:6379/0", "--port=5555"]

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  trading-network:
    driver: bridge 